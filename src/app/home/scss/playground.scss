@keyframes fade-in {
    0% {
      opacity: 0;
    }
  
    100% {
      opacity: 1;
    }
}

.game-container {
    position: relative;
    width: $field-width;
    height: $field-width;
    box-sizing: border-box;

    margin-top: $game-container-margin-top;
    padding: $grid-spacing;

    background: $game-container-background;
    border-radius: $tile-border-radius * 2;

    cursor: default;

    -webkit-touch-callout: none;
    -ms-touch-callout: none;

    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;

    -ms-touch-action: none;
    touch-action: none;

    .game-message {
        display: none;

        justify-content: center;
        flex-direction: column;
        align-items: center;

        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background: rgba($tile-color, .5);
        z-index: 100;

        text-align: center;

        p {
            font-size: 60px;
            font-weight: bold;
            line-height: 60px;
        }

        .lower {
            display: block;
        }

        button {
            @include button;

            &.keep-playing-button {
                display: none;
            }
        }

        @include animation(fade-in 800ms ease $transition-speed * 12);
        @include animation-fill-mode(both);

        &.game-won {
            background: rgba($tile-gold-color, .5);
            color: $bright-text-color;

            button.keep-playing-button {
                display: inline-block;
                margin-right: 9px;
            }
        }

        &.game-won, &.game-over {
            display: flex;
        }
    }
}

.grid-container {
    position: absolute;
    z-index: 1;
}

.grid-row {
    margin-bottom: $grid-spacing;

    &:last-child {
    margin-bottom: 0;
    }

    &:after {
        content: "";
        display: block;
        clear: both;
    }

    
}

.grid-cell {
    width: $tile-size;
    height: $tile-size;
    margin-right: $grid-spacing;
    float: left;

    border-radius: $tile-border-radius;

    background: rgba($tile-color, .35);

    &:last-child {
        margin-right: 0;
    }
}

.tile-container {
    position: absolute;
    z-index: 2;
}

.tile {
    &, .tile-inner {
        width: ceil($tile-size);
        height: ceil($tile-size);
        line-height: ceil($tile-size);
    }

    // Build position classes
    @for $x from 1 through $grid-row-cells {
        @for $y from 1 through $grid-row-cells {
            &.tile-position-#{$x}-#{$y} {
                $xPos: floor(($tile-size + $grid-spacing) * ($x - 1));
                $yPos: floor(($tile-size + $grid-spacing) * ($y - 1));
                @include transform(translate($xPos, $yPos));
            }
        }
    }


}

.tile {
    position: absolute; // Makes transforms relative to the top-left corner
  
    .tile-inner {
      border-radius: $tile-border-radius;
  
      background: $tile-color;
      text-align: center;
      font-weight: bold;
      z-index: 10;
  
      font-size: 55px;
    }
  
    // Movement transition
    @include transition($transition-speed ease-in-out);

    -webkit-transition-property: -webkit-transform;
    -moz-transition-property: -moz-transform;
    transition-property: transform;
  
    $base: 2;
    $exponent: 1;
    $limit: 11;
  
    // Colors for all 11 states, false = no special color
    $special-colors: false false, // 2
                     false false, // 4
                     #f78e48 true, // 8
                     #fc5e2e true, // 16
                     #ff3333 true, // 32
                     #ff0000 true, // 64
                     false true, // 128
                     false true, // 256
                     false true, // 512
                     false true, // 1024
                     false true; // 2048
  
    // Build tile colors
    @while $exponent <= $limit {
      $power: pow($base, $exponent);
  
      &.tile-#{$power} .tile-inner {
        // Calculate base background color
        $gold-percent: ($exponent - 1) / ($limit - 1) * 100;
        $mixed-background: mix($tile-gold-color, $tile-color, $gold-percent);
  
        $nth-color: nth($special-colors, $exponent);
  
        $special-background: nth($nth-color, 1);
        $bright-color: nth($nth-color, 2);
  
        @if $special-background {
          $mixed-background: mix($special-background, $mixed-background, 55%);
        }
  
        @if $bright-color {
          color: $bright-text-color;
        }
  
        // Set background
        background: $mixed-background;
  
        // Add glow
        $glow-opacity: max($exponent - 4, 0) / ($limit - 4);
  
        @if not $special-background {
          box-shadow: 0 0 30px 10px rgba($tile-gold-glow-color, $glow-opacity / 1.8),
                      inset 0 0 0 1px rgba(white, $glow-opacity / 3);
        }
  
        // Adjust font size for bigger numbers
        @if $power >= 100 and $power < 1000 {
          font-size: 45px;
  
          // Media queries placed here to avoid carrying over the rest of the logic
          @include smaller($mobile-threshold) {
            font-size: 25px;
          }
        } @else if $power >= 1000 {
          font-size: 35px;
  
          @include smaller($mobile-threshold) {
            font-size: 15px;
          }
        }
      }
  
      $exponent: $exponent + 1;
    }
  
    // Super tiles (above 2048)
    &.tile-super .tile-inner {
      color: $bright-text-color;
      background: mix(#333, $tile-gold-color, 95%);
  
      font-size: 30px;
  
      @include smaller($mobile-threshold) {
        font-size: 10px;
      }
    }
}
  
  @include keyframes(appear) {
    0% {
      opacity: 0;
      @include transform(scale(0));
    }
  
    100% {
      opacity: 1;
      @include transform(scale(1));
    }
  }
  
  .tile-new .tile-inner {
    @include animation(appear 200ms ease $transition-speed);
    @include animation-fill-mode(backwards);
  }
  
  @include keyframes(pop) {
    0% {
      @include transform(scale(0));
    }
  
    50% {
      @include transform(scale(1.2));
    }
  
    100% {
      @include transform(scale(1));
    }
  }
  
  .tile-merged .tile-inner {
    z-index: 20;
    @include animation(pop 200ms ease $transition-speed);
    @include animation-fill-mode(backwards);
  }
  
  .game-intro {
    float: left;
    line-height: 42px;
    margin-bottom: 0;
  }
  
  
  .game-explanation {
    margin-top: 50px;
  }



@include smaller($mobile-threshold) {
    .game-container {
        width: $field-width-min;
        height: $field-width-min;

        padding: $grid-spacing-min;
        margin-top: $game-container-margin-top-min;
    }
    .grid-row {
        margin-bottom: $grid-spacing-min;
    }
    .grid-cell {
        margin-right: $grid-spacing-min;
        
        width: $tile-size-min;
        height: $tile-size-min;
    }
    .tile {
        &, .tile-inner {
            width: ceil($tile-size-min);
            height: ceil($tile-size-min);
            line-height: ceil($tile-size-min);
            font-size: 35px;
        }
    
        // Build position classes
        @for $x from 1 through $grid-row-cells {
            @for $y from 1 through $grid-row-cells {
                &.tile-position-#{$x}-#{$y} {
                    $xPos: floor(($tile-size-min + $grid-spacing-min) * ($x - 1));
                    $yPos: floor(($tile-size-min + $grid-spacing-min) * ($y - 1));
                    @include transform(translate($xPos, $yPos));
                }
            }
        }
    
        @include smaller($mobile-threshold) {
            width: $field-width-min;
        }
    }
}